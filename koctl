#!/bin/bash

action=$1
target=$2
KO_BASE=/opt
set -e

if [[ "${action}" == "upgrade" ]];then
  export  KO_BASE=`head -6 $(which koctl)|grep KO_BASE=|awk -F= '{print $2}'`
  if [[ ${KO_BASE} == "" ]];then
    echo "获取KubeOperator安装路径失败，请确认安装路径后检查 $(which koctl)，KO_BASE 参数是否正确"
    exit 0
  fi
  if [[ -f $(pwd)/kubeoperator/scripts/const.sh ]];then
  sed -i -e "1,10s#KO_BASE=.*#KO_BASE=${KO_BASE}#g" $(pwd)/kubeoperator/scripts/const.sh | tee -a ${CWD}/upgrade.log
  else
    echo "开始在线升级"
  fi
fi

if [[ -f ${KO_BASE}/kubeoperator/scripts/const.sh ]];then
  source ${KO_BASE}/kubeoperator/scripts/const.sh
elif [ -f $(pwd)/kubeoperator/scripts/const.sh ]; then
  source $(pwd)/kubeoperator/scripts/const.sh
else
  export LATEST_KO_VERSION=$(curl -s https://github.com/KubeOperator/KubeOperator/releases/latest/download 2>&1 |grep -Eo "v([0-9]{1,}\.)+[0-9]{1,}")
  if [ ! -z `echo ${target}|grep -Eo "v([0-9]{1,}\.)+[0-9]{1,}"` ];then
   LATEST_KO_VERSION=${target}
  fi
  export KO_INSTALL_URL="https://github.com/KubeOperator/KubeOperator/releases/download/${LATEST_KO_VERSION}/installer-${LATEST_KO_VERSION}.tar.gz"
  wget --no-check-certificate "${KO_INSTALL_URL}" -P $(pwd) | tee -a ${CWD}/upgrade.log
  tar zxvf $(pwd)/installer-${LATEST_KO_VERSION}.tar.gz -C $(pwd) > /dev/null 2>&1 | tee -a ${CWD}/upgrade.log
  mkdir -p "${KO_BASE}/kubeoperator/scripts"
  \cp -rp $(pwd)/installer/kubeoperator/scripts/*  ${KO_BASE}/kubeoperator/scripts
  source $(pwd)/installer/kubeoperator/scripts/const.sh
fi

function usage() {
   echo "KubeOperator 控制脚本"
   echo
   echo "Usage: "
   echo "  ./koctl.sh [COMMAND] [ARGS...]"
   echo "  ./koctl.sh --help"
   echo "Commands: "
   echo "  status    查看 KubeOperator 服务运行状态"
   echo "  start     启动 KubeOperator 服务"
   echo "  stop      停止 KubeOperator 服务"
   echo "  restart   重启 KubeOperator 服务"
   echo "  reload    重新加载 KubeOperator 服务"
   echo "  uninstall 卸载 KubeOperator 服务"
   echo "  pull      在线拉取 KubeOperator 最新镜像"
   echo "  logs      查看 KubeOperator 日志信息"
   echo "  version   查看 KubeOperator 版本信息"
   echo "  backup    备份 KubeOperator，备份前需先停止 KubeOperator 服务"
   echo "  restore   恢复到 KubeOperator 指定的备份,例：koctl restore /opt/kubeoperator_backup/kubeoperator-backup-xxx.tar.gz"
   echo "  upgrade   升级 KubeOperator 版本,在线升级默认升级到最新版本，也可指定升级版本，例: koctl upgrade v3.0.1，离线升级请参考官方文档"
}

function status() {
   echo
   cd ${KO_BASE}/kubeoperator; docker-compose ps
}
function start() {
   colorMsg $green "[Starting KubeOperator]"
   cd ${KO_BASE}/kubeoperator; docker-compose up -d  ${target}
}
function stop() {
   colorMsg $green "[Stopping KubeOperator]"
   cd ${KO_BASE}/kubeoperator; docker-compose down ${target}
}
function restart() {
   stop
   start
}
function reload() {
   echo
   cd ${KO_BASE}/kubeoperator; docker-compose up -d ${target}
}
function logs() {
   echo
   cd ${KO_BASE}/kubeoperator; docker-compose logs ${target}
}
function pull() {
   echo
   cd ${KO_BASE}/kubeoperator; docker-compose pull ${target}
}
function version() {
   echo  "$CURRENT_KO_VERSION"
}

function main() {
    case "${action}" in
      status)
         status
         ;;
      start)
         start
         ;;
      stop)
         stop
         ;;
      restart)
         restart
         ;;
      reload)
         reload
         ;;
      uninstall)
         bash "${KO_BASE}/kubeoperator/scripts/uninstall.sh"
         ;;
      version)
         version
         ;;
      pull)
         pull
         ;;
      logs)
         logs
         ;;
      upgrade)
        if [ -f $(pwd)/kubeoperator/scripts/upgrade.sh ];then
         bash "$(pwd)/kubeoperator/scripts/upgrade.sh" ${target}
        elif [ -f ${KO_BASE}/kubeoperator/scripts/upgrade.sh  ]; then
         bash "${KO_BASE}/kubeoperator/scripts/upgrade.sh" ${target}
        fi
         ;;
      backup)
         bash "${KO_BASE}/kubeoperator/scripts/backup.sh"
         ;;
      restore)
         bash "${KO_BASE}/kubeoperator/scripts/restore.sh"
         ;;
      help)
         usage
         ;;
      --help)
         usage
         ;;
      *)
         echo "不支持的参数，请使用 help 或 --help 参数获取帮助"
         ;;
    esac
}
main
